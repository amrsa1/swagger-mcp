name: Publish Package

permissions:
  contents: write
  packages: write
  pull-requests: read

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Test server initialization
        run: npm test

  publish-npm:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-npm-after-release:
    needs: version-and-release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  version-and-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Bump version
        id: version
        run: |
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "Bump version to ${{ steps.version.outputs.version_number }}"
          
      - name: Create and push tag
        run: |
          git tag ${{ steps.version.outputs.new_version }}
          git push origin main
          git push origin ${{ steps.version.outputs.new_version }}
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" -10)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" ${LAST_TAG}..HEAD)
          fi
          
          # Create release notes
          cat << EOF > release_notes.md
          ## üöÄ What's New in v${{ steps.version.outputs.version_number }}
          
          ### Changes
          $COMMITS
          
          ### üì¶ Installation
          
          **Global Installation (Recommended):**
          \`\`\`bash
          npm install -g swagger-mcp@${{ steps.version.outputs.version_number }}
          \`\`\`
          
          **Or use with npx (no installation required):**
          \`\`\`bash
          npx swagger-mcp@${{ steps.version.outputs.version_number }}
          \`\`\`
          
          ### ‚öôÔ∏è Configuration Examples
          
          \`\`\`json
          {
            "swagger-mcp": {
              "command": "npx",
              "args": ["-y", "swagger-mcp@${{ steps.version.outputs.version_number }}"],
              "env": {
                "API_BASE_URL": "https://api.example.com",
                "API_DOCS_URL": "https://api.example.com/swagger.json",
                "API_KEY": "your-api-key-here"
              }
            }
          }
          \`\`\`
          
          ### üîß Available Tools
          - **fetch_swagger_info** - Get API overview and authentication requirements
          - **list_endpoints** - List all available API endpoints with filtering
          - **get_endpoint_details** - Get detailed information about specific endpoints
          - **execute_api_request** - Execute API requests with authentication
          - **validate_api_response** - Validate API responses against schema
          
          ### üîë Authentication Support
          - API Keys (Header, Query Parameter)
          - Bearer Tokens with auto-refresh
          - Basic Authentication (Username/Password)
          - Custom headers and dynamic token management
          
          For detailed documentation, visit: https://github.com/amrsa1/swagger-mcp
          EOF
          
          echo "Generated release notes:"
          cat release_notes.md

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          release_name: "üöÄ swagger-mcp v${{ steps.version.outputs.version_number }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
